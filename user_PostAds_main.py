#!/usr/bin/env python
import constants as c

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage


bot = Bot(c.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


main_text = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º ü§ó\n" \
            "–ù–∞—à [–∫–∞–Ω–∞–ª](https://t.me/QSalon_Kiev) –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω, –∞ —Ü–µ–Ω—ã –Ω–µ–≤—ã—Å–æ–∫–∏–µ üëå\n" \
            "–í—Å–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º üòé\n\n" \
            "*–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –æ–±—å—è–≤–ª–µ–Ω–∏—è:*\n" \
            "1. –ë—å—é—Ç–∏ –∏–ª–∏ —Ñ–æ—Ç–æ —É—Å–ª—É–≥–∏.\n" \
            "2. –î–∏–µ—Ç–æ–ª–æ–≥–∏, –°–ø–æ—Ä—Ç, –í—Ä–∞—á–∏, –ö—É—Ä—Å—ã\n" \
            "3. –í–∞–∫–∞–Ω—Å–∏–∏, —Å–¥–∞—á–∞ –≤ —Å–∞–ª–æ–Ω–µ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç, —Ä–µ–∫–ª–∞–º–∞ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –¥—Ä—É–≥–æ–µ."

sub_main_text = "*–í—ã–±–µ—Ä–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤–∞—à–∏—Ö —É—Å–ª—É–≥ (–æ–ø–ª–∞—Ç–∞ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–æ–∂–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è):*\n" \
                "1. –ú–æ–¥–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç.\n" \
                "2. –ú–æ–¥–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–æ 249 –≥—Ä–Ω.\n" \
                "3. –ú–æ–¥–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å—É–º–º—É –æ—Ç 250 –≥—Ä–Ω."

comm_text = "–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? ü§î\n" \
            "–ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ\n¬´–î–∞–ª–µ–µ ‚û°¬ª\n\n" \
            "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @katrin_model"

post_cost_text = "–¶–µ–Ω–∞ –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {}"
requisites_text = "*–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ `5221 1911 0065 3194` _–ü–∞–Ω—á–µ–Ω–∫–æ –ê. –û._ \n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω/—Ñ–æ—Ç–æ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã."
pay_url_button = "https://www.privat24.ua/rd/transfer_to_card/?hash=rd%2Ftransfer_to_card%2F%7B%22from%22%3A%22%22%2C%22to%22%3A%22{card}%22%2C%22amt%22%3A%22{cost}%22%2C%22ccy%22%3A%22UAH%22%7D"
bye_text = "–ì–æ—Ç–æ–≤–æ ü•≥\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ª–æ–∂–µ–Ω–æ üåº\n–ñ–µ–ª–∞–µ–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞ –º—ã –≤–∞–º –≤ —ç—Ç–æ–º –ø–æ–º–æ–∂–µ–º üòâ\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –µ—â–µ ü§ó"
back_button = "‚¨Ö –ù–∞–∑–∞–¥"
next_button = "–î–∞–ª–µ–µ ‚û°"
complete_button = "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å"
main_button = "üåº –°–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"


class Form(StatesGroup):
    pay_photo = State()
    when = State()
    where = State()
    text = State()
    media = State()
    comment = State()
    confirm = State()


async def make_post(message, data):
    key = types.InlineKeyboardMarkup()

    first_name = str(message.from_user.first_name).replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    username = str(message.from_user.username).replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    comm = str(data['comm']).replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
    await bot.send_photo(c.admin, data['pay_photo'],
                         f"–û–ø–ª–∞—Ç–∞: [{first_name}](tg://user?id={message.from_user.id})\n"
                         f"@{username}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comm}", parse_mode=types.ParseMode.MARKDOWN)
    text = f"{data['text']}\n\nüóì –ö–æ–≥–¥–∞\n{data['when']}\n\nüìç –ì–¥–µ?\n{data['where']}"
    if data['photo']:
        if len(data['photo']) == 1:
            key.add(types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post"))
            await bot.send_photo(c.admin, data['photo'][0], caption=text, reply_markup=key)
        else:
            key.add(types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post_group"))
            photos = [types.InputMediaPhoto(data['photo'][0], caption=text)] \
                + [types.InputMediaPhoto(x) for x in data['photo'][1:]]
            m = await bot.send_media_group(c.admin, photos)
            await bot.send_message(c.admin, f'{text}\n\n{{"photo_group": {[x.photo[-1].file_id for x in m]}}}', reply_markup=key)
    elif data['video']:
        key.add(types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post"))
        await bot.send_video(c.admin, data['video'], caption=text, reply_markup=key)


async def confirm_post(message, data):
    text = f"{data['text']}\n\nüóì –ö–æ–≥–¥–∞\n{data['when']}\n\nüìç –ì–¥–µ?\n{data['where']}"
    if data['photo']:
        if len(data['photo']) == 1:
            await bot.send_photo(message.chat.id, data['photo'][0], caption=text)
        else:
            photos = [types.InputMediaPhoto(data['photo'][0], caption=text)] \
                + [types.InputMediaPhoto(x) for x in data['photo'][1:]]
            await bot.send_media_group(message.chat.id, photos)
    elif data['video']:
        await bot.send_video(message.chat.id, data['video'], caption=text)


async def choose_service(message, cost_text, cost):
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(back_button)
    pay_key = types.InlineKeyboardMarkup()
    pay_key.add(types.InlineKeyboardButton("–ü—Ä–∏–≤–∞—Ç24", url=pay_url_button.format(card='5221191100653194', cost=cost)))
    await message.answer(post_cost_text.format(cost_text), reply_markup=key)
    await message.answer(requisites_text, reply_markup=pay_key, parse_mode=types.ParseMode.MARKDOWN)
    await Form.pay_photo.set()


async def back_function(message, state):
    if message.text in (back_button, '/start'):
        await state.update_data({'photo': None})
        await Form.when.set()
        key = types.ReplyKeyboardMarkup(resize_keyboard=True)
        key.add(back_button)
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ, –Ω–∞—á–Ω—ë–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—á–∞–ª–∞...", reply_markup=key)
        await message.answer("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∞—à–∞ —É—Å–ª—É–≥–∞?")
        return True
    return False


def main_key():
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(main_button)
    return key


async def main_inline_keys(message):
    key = types.InlineKeyboardMarkup()
    but_1 = types.InlineKeyboardButton("1", callback_data="item_1")
    but_2 = types.InlineKeyboardButton("2", callback_data="item_2")
    but_3 = types.InlineKeyboardButton("3", callback_data="item_3")
    key.add(but_1, but_2, but_3)
    await message.answer(main_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=key, disable_web_page_preview=True)


@dp.message_handler(commands=['start'])
async def message_handler(message: types.Message):
    await main_inline_keys(message)


@dp.message_handler(commands=['start'], state=Form.pay_photo)
async def message_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_key())
    await main_inline_keys(message)


@dp.message_handler(commands=['reset'], state=Form)
async def message_handler(message: types.Message, state: FSMContext):
    if message.chat.id == c.admin:
        await state.finish()
        await message.answer("–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å", reply_markup=main_key())
        await main_inline_keys(message)
    else:
        await message.answer("–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ")


@dp.message_handler(content_types=['text'])
async def message_handler(message: types.Message):
    if message.text == main_button:
        await main_inline_keys(message)
    elif message.text == back_button:
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_key())


@dp.message_handler(content_types=['text', 'photo'], state=Form.pay_photo)
async def photo_handler(message: types.Message, state: FSMContext):
    if not message.photo:
        if message.text == back_button:
            await state.finish()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_key())
        return

    async with state.proxy() as data:
        data['pay_photo'] = message.photo[-1].file_id
    await Form.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å–æ–∑–¥–∞—Ç—å –∏ –≤—ã–ª–æ–∂–∏—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –≤–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤ üëå")
    await message.answer("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∞—à–∞ —É—Å–ª—É–≥–∞?")


@dp.message_handler(content_types=['text'], state=Form.when)
async def photo_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    async with state.proxy() as data:
        data['when'] = message.text
    await Form.next()
    await message.answer("–ì–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ —É—Å–ª—É–≥–∞?")


@dp.message_handler(content_types=['text'], state=Form.where)
async def photo_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    async with state.proxy() as data:
        data['where'] = message.text
    await Form.next()
    await message.answer("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ–±—å—è–≤–ª–µ–Ω–∏—è, –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:")


@dp.message_handler(content_types=['text'], state=Form.text)
async def photo_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    async with state.proxy() as data:
        data['text'] = message.text
    await Form.next()
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(next_button)
    key.add(back_button)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∫ –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–µ –±–æ–ª—å—à–µ 3 —Ñ–æ—Ç–æ –∏–ª–∏ 1 –≤–∏–¥–µ–æ)", reply_markup=key)


@dp.message_handler(content_types=types.ContentType.ANY, state=Form.media)
async def media_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    if message.text == next_button:
        async with state.proxy() as data:
            data['video'] = None
            try:
                if not data['photo']:
                    raise KeyError
            except KeyError:
                await message.answer("–ú–µ–¥–∏–∞ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
                return
        await Form.next()
        await message.answer(comm_text)

    elif message.photo:
        async with state.proxy() as data:
            data['video'] = None
            try:
                if data['photo'] is None:
                    raise KeyError
                if len(data['photo']) != 3:
                    data['photo'].append(message.photo[-1].file_id)
                else:
                    await message.answer("–ù–µ –±–æ–ª—å—à–µ 3-—Ö —Ñ–æ—Ç–æ!")
            except KeyError:
                data['photo'] = [message.photo[-1].file_id]

    elif message.video:
        async with state.proxy() as data:
            try:
                if data['photo'] is None:
                    raise KeyError
                await message.answer("–¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ!")
                return
            except KeyError:
                data['video'] = message.video.file_id
                data['photo'] = None
        await Form.next()
        await message.answer(comm_text)

    else:
        if message.document:
            await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª!")
        else:
            await message.reply("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")


@dp.message_handler(content_types=['text'], state=Form.comment)
async def message_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    comm = "-"
    if message.text == next_button:
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    else:
        comm = message.text
    async with state.proxy() as data:
        data['comm'] = comm
    await confirm_post(message, data)
    await Form.next()
    key = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key.add(complete_button)
    key.add(back_button)
    await message.answer("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    await message.answer("–î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ù–ê–ñ–ú–ò–¢–ï ¬´‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨¬ª", reply_markup=key)


@dp.message_handler(content_types=['text'], state=Form.confirm)
async def message_handler(message: types.Message, state: FSMContext):
    if await back_function(message, state):
        return

    elif message.text == complete_button:
        async with state.proxy() as data:
            pass
        await state.finish()
        await message.answer(bye_text, reply_markup=main_key())
        await make_post(message, data)


@dp.callback_query_handler(lambda callback_query: True)
async def callback_inline(callback_query: types.CallbackQuery):
    text_data = callback_query.data
    if text_data == "post":
        text = callback_query.message.caption
        photo = callback_query.message.photo
        video = callback_query.message.video
        if photo:
            await bot.send_photo(c.group, photo[-1].file_id, caption=text)
        elif video:
            await bot.send_video(c.group, video.file_id, caption=text)
        await callback_query.message.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    elif text_data == "post_group":
        data = str(callback_query.message.text)
        i = data.find('{"photo_group":')
        text = data[:i]
        photo_data = eval(data[i:])['photo_group']
        photos = [types.InputMediaPhoto(photo_data[0], caption=text)] \
            + [types.InputMediaPhoto(x) for x in photo_data[1:]]
        await bot.send_media_group(c.group, photos)
        await callback_query.message.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    else:
        if text_data == "item_1":
            key = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton("1", callback_data="sub_item_1")
            but_2 = types.InlineKeyboardButton("2", callback_data="sub_item_2")
            but_3 = types.InlineKeyboardButton("3", callback_data="sub_item_3")
            key.add(but_1, but_2, but_3)
            await callback_query.message.answer(sub_main_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=key)
        elif text_data == "sub_item_1":
            await choose_service(callback_query.message, "—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ 20 –≥—Ä–Ω üíÅ‚Äç‚ôÇ", 20)
        elif text_data == "sub_item_2":
            await choose_service(callback_query.message, "–≤—Å–µ–≥–æ 40 –≥—Ä–Ω üå∫", 40)
        elif text_data == "sub_item_3":
            await choose_service(callback_query.message, "–≤—Å–µ–≥–æ 80 –≥—Ä–Ω üå∫", 80)
        elif text_data == "item_2":
            await choose_service(callback_query.message, "–≤—Å–µ–≥–æ 150 –≥—Ä–Ω üå∫", 150)
        elif text_data == "item_3":
            await choose_service(callback_query.message, "300 –≥—Ä–Ω. –ú—ã –≤–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–æ 2000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –ø–∞—Ä—É –¥–Ω–µ–π ü•≥", 300)
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
